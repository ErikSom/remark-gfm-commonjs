{"version":3,"file":"bundle.js","sources":["../node_modules/ccount/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-gfm-autolink-literal/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-gfm-table/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-gfm-table/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-string/lib/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-gfm-table/node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-string/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm/node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-extension-gfm/node_modules/micromark-util-chunked/index.js","../node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-chunked/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-table/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-factory-space/index.js","../node_modules/micromark-extension-gfm/index.js","../lib/index.js","../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n"],"names":["ccount","value","character","source","String","TypeError","count","index","indexOf","length","unicodePunctuation","regexCheck","unicodeWhitespace","regex","code","test","fromCharCode","convert","ok","castFactory","Array","isArray","tests","checks","any","parameters","apply","this","anyFactory","check","checkAsRecord","all","node","nodeAsRecord","key","propsFactory","type","typeFactory","Error","testFunction","parent","Boolean","looksLikeANode","call","undefined","empty","CONTINUE","EXIT","visitParents","tree","visitor","reverse","is","factory","parents","name","tagName","Object","defineProperty","visit","subresult","offset","grandparents","result","toResult","children","nodeAsParent","concat","child","findAndReplace","list","options","ignored","ignore","pairs","tupleOrList","tuple","push","toExpression","toFunction","toPairs","pairIndex","grandparent","siblings","find","replace","start","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","slice","global","splice","handler","RegExp","string","escape","inConstruct","notInConstruct","enterLiteralAutolink","token","enter","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","exitLiteralAutolinkHttp","exit","exitLiteralAutolinkWww","data","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","prefix","previous","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","label","email","charCodeAt","normalizeIdentifier","toLowerCase","toUpperCase","enterFootnoteDefinition","identifier","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","state","info","tracker","createTracker","move","subexit","safe","associationId","current","before","after","footnoteDefinition","shift","indentLines","containerFlow","map","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","codePointAt","listInScope","none","includes","hardBreak","_1","unsafe","pattern","longestStreak","substring","expected","max","checkQuote","marker","quote","emphasis","checkEmphasis","step","emptyOptions","toString","one","includeImageAlt","includeHtml","alt","values","join","formatHeadingAsSetext","literalWithBreak","testOrVisitor","visitorOrReverse","maybeReverse","depth","setext","html","image","suffix","imageReference","referenceType","reference","inlineCode","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","resourceLink","link","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","Math","encode","meta","definition","heading","rank","min","lastIndexOf","closeAtx","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","style","checkListItemIndent","incrementListMarker","size","spread","ceil","paragraph","root","some","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","align","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","handlers","defaultHandlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","sizes","columnIndex","cell","lines","delimiterStart","delimiterEnd","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","column","assign","listItemWithTaskListItem","checkable","checkbox","hasOwnProperty","syntaxExtension","extension","hook","left","right","constructs","existing","add","remove","items","end","chunkStart","from","unshift","asciiAlpha","asciiAlphanumeric","markdownLineEndingOrSpace","wwwPrefix","tokenize","effects","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","markdownSpace","factorySpace","limit","Number","POSITIVE_INFINITY","blankLine","markdownLineEnding","indent","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","resolveToPotentialGfmFootnoteCall","context","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","resolve","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","open","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","constructor","editMap","at","addImplementation","sort","a","b","vecs","pop","gfmTableAlign","inDelimiterRow","event","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfm","extensions","combineExtensions","document","continuation","resolveTo","flow","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","delete","gfmToMarkdown"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116]}